// Generated by eXtraCoffeeScript 1.2.0n
(function() {
  var C, Deferrals, Rendezvous, catchExceptions, exceptionHandler, findDeferral, makeDeferReturn, stackWalk, tickCounter, __active_trace, __c,
    __slice = [].slice;

  exports.transform = function(x) {
    return x.icedTransform();
  };

  exports["const"] = C = {
    k: "__iced_k",
    param: "__iced_p_",
    ns: "iced",
    Deferrals: "Deferrals",
    deferrals: "__iced_deferrals",
    fulfill: "_fulfill",
    b_while: "_break",
    t_while: "_while",
    c_while: "_continue",
    n_while: "_next",
    n_arg: "__iced_next_arg",
    defer_method: "defer",
    slot: "__slot",
    assign_fn: "assign_fn",
    runtime: "icedrun",
    autocb: "autocb",
    retslot: "ret",
    trace: "__iced_trace",
    passed_deferral: "__iced_passed_deferral",
    findDeferral: "findDeferral",
    lineno: "lineno",
    parent: "parent",
    filename: "filename",
    funcname: "funcname",
    catchExceptions: 'catchExceptions',
    runtime_modes: ["node", "inline", "window", "none"]
  };

  makeDeferReturn = function(obj, defer_args, id, trace_template) {
    var k, ret, trace, v;
    trace = {};
    for (k in trace_template) {
      v = trace_template[k];
      trace[k] = v;
    }
    trace[C.lineno] = defer_args != null ? defer_args[C.lineno] : void 0;
    ret = function() {
      var inner_args, _ref;
      inner_args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (defer_args != null) {
        if ((_ref = defer_args.assign_fn) != null) _ref.apply(null, inner_args);
      }
      return obj._fulfill(id, trace);
    };
    ret[C.trace] = trace;
    return ret;
  };

  __c = 0;

  tickCounter = function(mod) {
    __c++;
    if ((__c % mod) === 0) {
      __c = 0;
      return true;
    } else {
      return false;
    }
  };

  __active_trace = null;

  Deferrals = (function() {

    Deferrals.name = 'Deferrals';

    function Deferrals(k, trace) {
      this.trace = trace;
      this.continuation = k;
      this.count = 1;
      this.ret = null;
    }

    Deferrals.prototype._call = function(trace) {
      __active_trace = trace;
      return this.continuation(this.ret);
    };

    Deferrals.prototype._fulfill = function(id, trace) {
      var _this = this;
      if (--this.count === 0) {
        if (tickCounter(500)) {
          return process.nextTick((function() {
            return _this._call(trace);
          }));
        } else {
          return this._call(trace);
        }
      }
    };

    Deferrals.prototype.defer = function(args) {
      var self;
      this.count++;
      self = this;
      return makeDeferReturn(self, args, null, this.trace);
    };

    return Deferrals;

  })();

  findDeferral = function(args) {
    var a, _i, _len;
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      a = args[_i];
      if (a != null ? a[C.trace] : void 0) return a;
    }
    return null;
  };

  Rendezvous = (function() {
    var RvId;

    Rendezvous.name = 'Rendezvous';

    function Rendezvous() {
      this.completed = [];
      this.waiters = [];
      this.defer_id = 0;
      this[C.deferrals] = this;
    }

    RvId = (function() {

      RvId.name = 'RvId';

      function RvId(rv, id) {
        this.rv = rv;
        this.id = id;
      }

      RvId.prototype.defer = function(defer_args) {
        return this.rv._deferWithId(this.id, defer_args);
      };

      return RvId;

    })();

    Rendezvous.prototype.wait = function(cb) {
      var x;
      if (this.completed.length) {
        x = this.completed.shift();
        return cb(x);
      } else {
        return this.waiters.push(cb);
      }
    };

    Rendezvous.prototype.defer = function(defer_args) {
      var id;
      id = this.defer_id++;
      return this.deferWithId(id, defer_args);
    };

    Rendezvous.prototype.id = function(i) {
      var ret;
      ret = {};
      ret[C.deferrals] = new RvId(this, i);
      return ret;
    };

    Rendezvous.prototype._fulfill = function(id, trace) {
      var cb;
      if (this.waiters.length) {
        cb = this.waiters.shift();
        return cb(id);
      } else {
        return this.completed.push(id);
      }
    };

    Rendezvous.prototype._deferWithId = function(id, defer_args) {
      this.count++;
      return makeDeferReturn(this, defer_args, id, {});
    };

    return Rendezvous;

  })();

  stackWalk = function(cb) {
    var fn, line, ret, tr, _ref;
    ret = [];
    tr = cb ? cb[C.trace] : __active_trace;
    while (tr) {
      fn = tr[C.funcname] || "<anonymous>";
      line = "   at " + fn + " (" + tr[C.filename] + ":" + (tr[C.lineno] + 1) + ")";
      ret.push(line);
      tr = tr != null ? (_ref = tr[C.parent]) != null ? _ref[C.trace] : void 0 : void 0;
    }
    return ret;
  };

  exceptionHandler = function(err) {
    var stack;
    console.log(err.stack);
    stack = stackWalk();
    if (stack.length) {
      console.log("Iced 'stack' trace (w/ real line numbers):");
      return console.log(stack.join("\n"));
    }
  };

  catchExceptions = function() {
    return process.on('uncaughtException', function(err) {
      exceptionHandler(err);
      return process.exit(1);
    });
  };

  exports.runtime = {
    Deferrals: Deferrals,
    Rendezvous: Rendezvous,
    findDeferral: findDeferral,
    stackWalk: stackWalk,
    exceptionHandler: exceptionHandler,
    catchExceptions: catchExceptions
  };

}).call(this);
